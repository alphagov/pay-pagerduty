#!/usr/bin/env ruby

require 'dotenv/load'
require 'date'
require 'time'
require 'csv'
require 'logger'
require 'pry'
require 'active_support/core_ext/time/zones'
Time.zone = 'Europe/London'

$LOAD_PATH << File.dirname(__FILE__) + "/../lib/"
require 'rotation'
require 'rota'
require 'pager_duty'
require 'cli'
require 'data_store'
require 'overrider'

data_store = DataStore.new
cli = Cli.new

if cli.help?
  cli.banner!
  exit
end

logger = Logger.new(STDOUT)

pd = PagerDuty.new(api_token: ENV.fetch('PAGER_DUTY_API_KEY'))

if cli.get_users?
  users = pd.users.map { |u| [u['name'], u['id']] }
  data_store.write_users(users)
end

if cli.get_schedules?
  raw_schedules = pd.schedules['schedules']
  schedules = raw_schedules.map { |s| [s['name'], s['id']] }
  data_store.write_schedules(schedules)
end

if true
  logger.info("Reading schedule files...")
  rota_file = File.dirname(__FILE__) + "/../data/rota.csv"
  user_file = File.dirname(__FILE__) + "/../data/users.csv"
  schedules_file = File.dirname(__FILE__) + "/../data/schedules.csv"

  rota = Rota.new(rota_file: rota_file, users_file: user_file, schedules_file: schedules_file)

  data_store.read_schedules.each do |schedule|
    logger.info("Fetching schedule '#{schedule['Name']}' from PagerDuty")
    rota_start = rota.from(schedule['Name'])
    rota_end = rota.to(schedule['Name'])
    raw_schedule = pd.schedule(schedule['ID'], rota_start, rota_end)

    actual_schedule = raw_schedule['schedule']['final_schedule']['rendered_schedule_entries']

    logger.info schedule['Name']
    logger.info "----------"

    rota.rotations(schedule['Name']).each do |rotation|
      overlaps = actual_schedule.select { |s| rotation.includes?(s) }

      actuals = overlaps.map do |ol|
        Override.new(
          Time.zone.parse(ol['start']),
          Time.zone.parse(ol['end']),
          ol['user']['id'],
          rotation.name
        )
      end
      expected = Overrider.new(rotation, schedule['Type'].to_sym, data_store.read_bank_holidays).overrides

      need_to_add = (expected - actuals)
      need_to_delete = (actuals - expected)

      if (need_to_add + need_to_delete).any?
        logger.info "#{rotation.start} - #{rotation.name} has invalid entries"
        logger.info "need to add:"
        need_to_add.each do |i|
          logger.info "  #{i.from.iso8601} - #{i.to.iso8601} - #{i.user_name}"
        end
        logger.info "need to delete:"
        need_to_delete.each do |i|
          logger.info "  #{i.from.iso8601} - #{i.to.iso8601} - #{i.user_name}"
        end

        if cli.apply_overrides? || cli.dry_run?
          logger.warn "  Applying overrides"
          overrides = Overrider.new(rotation, schedule['Type'].to_sym, data_store.read_bank_holidays).overrides
          overrides.each do |override|
            msg = "#{override.from.iso8601} - #{override.to.iso8601} - #{override.user_name} (#{override.user_id})"
            if cli.dry_run?
              msg = "[dry run] #{msg}"
            else
              pd.create_override(schedule['ID'], override)
            end

            logger.info "    #{msg}"
          end
        end
      else
        logger.info "#{rotation.start} - #{rotation.name} is valid"
      end
    end
  end
end
